from http.client import responses

import  telebot
from pyexpat.errors import messages
from telebot import types
from telebot.types import InlineKeyboardMarkup, ReplyKeyboardMarkup
import sqlite3
import json

bot = telebot.TeleBot('7604577236:AAFJ98laDnKKSRrJF3kAupHqJClAWhUqlBA')

def crypto_mapping_check(coin):
    with open('coins.json', mode='r') as file:
        crypto_mapping = json.load(file)
        coin = coin.strip()
        if coin in crypto_mapping:
            coin = crypto_mapping[coin]
            return coin
        else:
            return coin

def create_cancel_button():
    cancel_button_keyboard = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ò–¢–¨', callback_data='cancel_action')
    cancel_button_keyboard.add(btn)
    return cancel_button_keyboard

def select_from_db(message):
    user_name = message.from_user.username
    status = 'active'

    response = '–í–∞—à–∏ —Å–¥–µ–ª–∫–∏: \n'
    conn = sqlite3.connect('money_bag.db')
    cur = conn.cursor()

    cur.execute('SELECT coin, buy_price FROM money_bag WHERE user = ? AND status = ?', (user_name, status))
    result = cur.fetchall()

    conn.commit()
    conn.close()

    if len(result) == 0:
        response = '–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫'
        return response
    else:
        for coin, price in result:
            response += f'{coin} - {price} USDT\n'
        return response

def calculate_the_percentages():
    pass

@bot.message_handler(commands=['start'])
def start(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É üí∂')
    btn2 = types.KeyboardButton('–ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É ‚úÖ')
    btn3 = types.KeyboardButton('–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å üíº')
    btn4 = types.KeyboardButton('–ú–æ–∏ —Å–¥–µ–ª–∫–∏ üìàüìâ')
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)
    bot.send_message(message.chat.id,f'–í–´–ë–ï–†–ò –§–£–ù–ö–¶–ò–Æ',
                     reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_name = message.from_user.username
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É üí∂':
        bot.reply_to(message, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏ —Ü–µ–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –≤–æ—à–ª–∏ –≤ —Å–¥–µ–ª–∫—É \n'
                              '–ù–∞–ø—Ä–∏–º–µ—Ä: \n'
                              'BTC - price \n'
                              'ETH - price \n'
                              'SOL - price \n')
        bot.send_message(message.chat.id, f'–ö—Å—Ç–∞—Ç–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ —Ç–∞ –≤–∞–Ω—é—á–∫–∞\n'
                                          f'—è –ø—Ä–æ —Ç–µ–±—è, {message.from_user.username}')
        bot.register_next_step_handler(message, add_a_deal)

    elif message.text == '–ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É ‚úÖ':
        bot.reply_to(message, '–ù–∞–ø–∏—à–∏—Ç–µ –º–æ–Ω–µ—Ç—É –∏ —Ü–µ–Ω—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –≤–æ—à–ª–∏ –≤ —Å–¥–µ–ª–∫—É \n'
                              '–ù–∞–ø—Ä–∏–º–µ—Ä: \n'
                              'BTC - price \n'
                              'ETH - price \n'
                              'SOL - price \n')
        response = select_from_db(message)
        bot.send_message(message.chat.id, response)
        bot.register_next_step_handler(message, close_a_deal)

    elif message.text == '–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å üíº':
        bot.reply_to(message, '–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å')

    elif message.text == '–ú–æ–∏ —Å–¥–µ–ª–∫–∏ üìàüìâ':
        bot.reply_to(message, '–í–∞—à–∏ —Å–¥–µ–ª–∫–∏')

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_action')
def cancel_action(call):
    bot.send_message(call.message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    start(call.message)

def checker(message):
    if message.text in ('–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É üí∂', '–ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É ‚úÖ', '–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å üíº', '–ú–æ–∏ —Å–¥–µ–ª–∫–∏ üìàüìâ'):
        cancel_button = create_cancel_button()
        bot.send_message(message.chat.id, f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ¬´123¬ª\n'
                                          '–ù–∞–∂–º–∏—Ç–µ ¬´–û–¢–ú–ï–ù–ò–¢–¨¬ª, —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –æ–ø—Ü–∏—é', reply_markup=cancel_button)
        return False
    else:
        return True

def request_editor(message):
    request_text = message.text.strip()
    try:
        coin, price = request_text.split('-')
        coin = crypto_mapping_check(coin)
        return coin, float(price)
    except ValueError:
        return False, False


def add_a_deal(message):
    check = checker(message)
    if check == True:
        user_name = message.from_user.username
        coin, price = request_editor(message)
        sell_price = 0
        percent = 0
        status = 'active'
        if coin == False:
            bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç \n'
                                              '–í–≤–µ–¥–∏—Ç–µ: \n'
                                              'Coin - price')
        else:
            conn = sqlite3.connect('money_bag.db')
            cur = conn.cursor()

            cur.execute('INSERT INTO money_bag (user, coin, buy_price, sell_price, percent, status) VALUES (?, ?, ?, ?, ?, ?)', (user_name, coin, price, sell_price, percent, status))

            conn.commit()
            conn.close()
            bot.send_message(message.chat.id, f'–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ \n'
                                              f'{coin} - {price} USDT')


def close_a_deal(message):
    user_name = message.from_user.username
    coin, sell_price = request_editor(message)
    status = 'success'
    buy_price = None
    if coin == False:
        bot.send_message(message.chat.id, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç \n'
                                          '–í–≤–µ–¥–∏—Ç–µ: \n'
                                          'Coin - price')
    else:
        conn = sqlite3.connect('money_bag.db')
        cur = conn.cursor()

        cur.execute('SELECT buy_price FROM money_bag WHERE user = ? AND coin = ?',
                    (user_name, coin))

        result = cur.fetchall()
        for buy in result:
            buy_price = float(buy[0])

        conn.commit()
        conn.close()

        percent = ((sell_price - buy_price) / buy_price) * 100
        bot.send_message(message.chat.id, percent)


        conn = sqlite3.connect('money_bag.db')
        cur = conn.cursor()

        cur.execute('UPDATE money_bag SET sell_price = ?, percent = ?, status = ? WHERE user = ? AND coin = ?', (sell_price, percent, status, user_name, coin))

        conn.commit()
        conn.close()

        if percent >= 1:
            bot.send_message(message.chat.id, f'–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –≤ –ø–ª—é—Å ‚úÖ\n\n'
                                              f'{coin} - (buy: {buy_price} -> sell: {sell_price}) -> {percent}% ‚úÖ')
        else:
            bot.send_message(message.chat.id, f'–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –≤ –º–∏–Ω—É—Å ‚ùå\n\n'
                                              f'{coin} - (buy: {buy_price} -> sell: {sell_price}) -> {percent}% ‚ùå')



def my_bag(message):
    check = checker(message)
    if check == True:
        bot.send_message(message.chat.id, '–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')

def my_deals(message):
    check = checker(message)
    if check == True:
        bot.send_message(message.chat.id, '–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')



bot.infinity_polling()

# import sqlite3
#
# conn = sqlite3.connect('money_bag.db')
# cur = conn.cursor()
#
#
# cur.execute('CREATE TABLE IF NOT EXISTS money_bag (id INTEGER PRIMARY KEY AUTOINCREMENT, user TEXT, coin TEXT, buy_price REAL,sell_price REAL, percent REAL, status TEXT)')
# conn.commit()
# conn.close()
